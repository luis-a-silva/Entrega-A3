No Windows power shell executar o código:
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned

SOBRE O DOCKER COMPOSE
O arquivo docker-compose.yml define dois serviços:

1. API (Node.js):
- Construída a partir do Dockerfile na pasta api
- Expõe a porta 8800
- Conecta-se ao banco de dados MySQL
- Utiliza variáveis de ambiente para conexão com o banco

2. Banco de dados (MySQL):
- Usa a imagem oficial mysql:8.0
- Expõe a porta 3306
- Volume persistente para dados
- Inicialização automática do banco
- Healthcheck para garantir disponibilidade quando o container da API for inicializado

CONFIGURAÇÃO DO AMBIENTE DE DESENVOLVIMENTO

1. Instale o Docker Desktop
2. Clone o repositório do projeto
3. Na raiz do projeto, execute o Docker Compose:

```bash
docker compose -f "docker-compose.yml" up -d --build 
```

Este comando irá:
- Construir a imagem da API Node.js
- Criar um container MySQL
- Configurar a rede entre os containers
- Iniciar todos os serviços

Para parar os containers:

```bash
docker compose down
```

ESTRUTURA DO BANCO DE DADOS

Definindo Entidades:

Cliente
id, nome, data_nascimento, email, numero_tel

Vendedor
id, nome, data_nascimento, email, numero_tel, cod_matricula

Produto
id, nome_produto, descricao, quantidade, preco

Compra
id, produto_id, vendedor_id, cliente_id, quantidade status

Query abaixo:

create database loja_db;
use loja_db;

CREATE TABLE cliente(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    data_nascimento DATE,
    email VARCHAR(255),
    numero_tel BIGINT
);

CREATE TABLE vendedor(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    data_nascimento DATE,
    email VARCHAR(255),
    numero_tel BIGINT,
    cod_matricula VARCHAR(255) NOT NULL
);

CREATE TABLE produto(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    descricao VARCHAR(255),
    quantidade BIGINT NOT NULL,
    preco BIGINT NOT NULL
);

/*Executar esta query após a execução das 3 primeiras por conta da dependencia das chaves estrangeiras*/
CREATE TABLE compra (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    vendedor_id INT NOT NULL,
    produto_id INT NOT NULL,
    quantidade INT NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES cliente(id),
    FOREIGN KEY (vendedor_id) REFERENCES vendedor(id),
    FOREIGN KEY (produto_id) REFERENCES produto(id)
);

DELIMITER //

CREATE TRIGGER after_insert_compra
AFTER INSERT ON compra
FOR EACH ROW
BEGIN
    UPDATE produto
    SET quantidade = quantidade - NEW.quantidade
    WHERE id = NEW.produto_id;
END;
//

DELIMITER ;


DELIMITER //

CREATE TRIGGER after_delete_compra
AFTER DELETE ON compra
FOR EACH ROW
BEGIN
    UPDATE produto
    SET quantidade = quantidade + OLD.quantidade
    WHERE id = OLD.produto_id;
END;
//

DELIMITER ;




POPULANDO O BANCO:


INSERT INTO cliente (nome, data_nascimento, email, numero_tel)
VALUES
    ('Maria Silva', '1990-05-15', 'maria.silva@example.com', 11987654321);

INSERT INTO vendedor (nome, data_nascimento, email, cod_matricula, numero_tel)
VALUES
    ('José Luiz', '1990-05-15', 'jose.luiz@example.com', 001, 11988887070);

INSERT INTO produto (nome, descricao, quantidade, preco)
VALUES ("Macarrão", "Macarrão parafuso", 50, 4);

/*Executar esta query após a execução das 3 primeiras por conta da dependencia das chaves estrangeiras*/
INSERT INTO compra (cliente_id, vendedor_id, produto_id, quantidade)
VALUES (1,1,1,5);


LÓGICA DA COMPRA E CONTROLE DO ESTOQUE

TABELA DE ITENS 

PRODUTO 1	|	DESCRICAO	|	QUANTIDADE	|	PREÇO	|	ADICIONAR A SACOLA	|

modal de adicionar quantidade 




